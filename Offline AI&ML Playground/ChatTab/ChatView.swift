//
//  ChatView.swift
//  Offline AI&ML Playground
//
//  Created by Ruslan Popesku on 03.07.2025.
//  Copyright Â© 2025 Ruslan Popesku. All rights reserved.
//

import SwiftUI

// MARK: - Simple Chat Models

struct SimpleChatMessage: Identifiable {
    let id: UUID
    let content: String
    let isUser: Bool
    let timestamp: Date
    
    init(content: String, isUser: Bool, timestamp: Date = Date()) {
        self.id = UUID()
        self.content = content
        self.isUser = isUser
        self.timestamp = timestamp
    }
}

struct SimpleChatSession: Identifiable {
    let id: UUID
    var title: String
    var messages: [SimpleChatMessage]
    let createdAt: Date
    var updatedAt: Date
    
    init(title: String = "New Chat") {
        self.id = UUID()
        self.title = title
        self.messages = []
        self.createdAt = Date()
        self.updatedAt = Date()
    }
    
    mutating func addMessage(_ message: SimpleChatMessage) {
        messages.append(message)
        updatedAt = Date()
        
        // Update title from first user message
        if title == "New Chat" && message.isUser && !message.content.isEmpty {
            title = String(message.content.prefix(30)) + (message.content.count > 30 ? "..." : "")
        }
    }
}

// MARK: - Chat View Model

@MainActor
class SimpleChatViewModel: ObservableObject {
    @Published var currentSession = SimpleChatSession()
    @Published var sessions: [SimpleChatSession] = []
    @Published var messageInput = ""
    @Published var isGenerating = false
    @Published var loadedModel: String? = "Llama 2-7B Chat"
    @Published var generationError: String?
    @Published var showingSessionPicker = false
    
    var canSendMessage: Bool {
        !messageInput.trimmingCharacters(in: .whitespacesAndNewlines).isEmpty &&
        !isGenerating &&
        loadedModel != nil
    }
    
    var modelDisplayName: String {
        loadedModel ?? "No model loaded"
    }
    
    var hasMessages: Bool {
        !currentSession.messages.isEmpty
    }
    
    func sendMessage() {
        Task {
            let messageContent = messageInput.trimmingCharacters(in: .whitespacesAndNewlines)
            guard !messageContent.isEmpty else { return }
            
            // Create user message
            let userMessage = SimpleChatMessage(
                content: messageContent,
                isUser: true,
                timestamp: Date()
            )
            
            // Update state
            currentSession.addMessage(userMessage)
            messageInput = ""
            isGenerating = true
            generationError = nil
            
            do {
                // Simulate AI response
                try await Task.sleep(nanoseconds: 1_000_000_000) // 1 second
                
                let response = generateSimpleResponse(for: messageContent)
                
                let assistantMessage = SimpleChatMessage(
                    content: response,
                    isUser: false,
                    timestamp: Date()
                )
                
                currentSession.addMessage(assistantMessage)
                isGenerating = false
                
            } catch {
                isGenerating = false
                generationError = error.localizedDescription
            }
        }
    }
    
    func newSession() {
        currentSession = SimpleChatSession()
        generationError = nil
    }
    
    func clearConversation() {
        currentSession = SimpleChatSession()
        generationError = nil
    }
    
    private func generateSimpleResponse(for prompt: String) -> String {
        if prompt.lowercased().contains("hello") || prompt.lowercased().contains("hi") {
            return "Hello! How can I help you today?"
        } else if prompt.lowercased().contains("how are you") {
            return "I'm doing well, thank you for asking! How can I assist you?"
        } else {
            return "Thank you for your message: \"\(prompt)\". This is a simulated response. In a real implementation, this would be generated by an actual LLM."
        }
    }
}

// MARK: - Main Chat View

struct ChatView: View {
    @StateObject private var viewModel = SimpleChatViewModel()
    
    var body: some View {
        NavigationView {
            VStack(spacing: 0) {
                // Chat header
                ChatHeaderView(modelName: viewModel.modelDisplayName)
                
                // Messages list
                if viewModel.hasMessages {
                    ScrollViewReader { proxy in
                        ScrollView {
                            LazyVStack(spacing: 12) {
                                ForEach(viewModel.currentSession.messages) { message in
                                    ChatMessageView(message: message)
                                        .id(message.id)
                                }
                                
                                // Typing indicator
                                if viewModel.isGenerating {
                                    TypingIndicatorView()
                                }
                            }
                            .padding()
                        }
                        .onChange(of: viewModel.currentSession.messages.count) { _ in
                            if let lastMessage = viewModel.currentSession.messages.last {
                                withAnimation(.easeOut(duration: 0.3)) {
                                    proxy.scrollTo(lastMessage.id, anchor: .bottom)
                                }
                            }
                        }
                    }
                } else {
                    // Empty state
                    EmptyStateView(modelName: viewModel.modelDisplayName)
                }
                
                Divider()
                
                // Input area
                ChatInputView(
                    text: $viewModel.messageInput,
                    canSend: viewModel.canSendMessage,
                    isGenerating: viewModel.isGenerating,
                    onSend: { viewModel.sendMessage() }
                )
            }
            .navigationTitle("Chat")
            .toolbar {
                ToolbarItem(placement: .automatic) {
                    Button("Sessions") {
                        viewModel.showingSessionPicker.toggle()
                    }
                }
                
                ToolbarItem(placement: .automatic) {
                    Menu {
                        Button("New Chat") {
                            viewModel.newSession()
                        }
                        
                        Button("Clear Conversation") {
                            viewModel.clearConversation()
                        }
                    } label: {
                        Image(systemName: "ellipsis.circle")
                    }
                }
            }
        }
        .alert("Generation Error", isPresented: .constant(viewModel.generationError != nil)) {
            Button("OK") {
                viewModel.generationError = nil
            }
        } message: {
            Text(viewModel.generationError ?? "")
        }
    }
}

// MARK: - Supporting Views

struct ChatHeaderView: View {
    let modelName: String
    
    var body: some View {
        HStack {
            VStack(alignment: .leading, spacing: 2) {
                Text("Currently Active")
                    .font(.caption2)
                    .foregroundColor(.secondary)
                
                Text(modelName)
                    .font(.caption)
                    .fontWeight(.medium)
            }
            
            Spacer()
            
            Button("Switch Model") {
                // Switch model action
            }
            .font(.caption)
            .buttonStyle(.bordered)
            .controlSize(.small)
        }
        .padding(.horizontal)
        .padding(.vertical, 8)
        .background(.regularMaterial)
    }
}

struct ChatInputView: View {
    @Binding var text: String
    let canSend: Bool
    let isGenerating: Bool
    let onSend: () -> Void
    
    var body: some View {
        HStack(spacing: 12) {
            TextField("Type a message...", text: $text, axis: .vertical)
                .textFieldStyle(.roundedBorder)
                .disabled(isGenerating)
            
            Button(action: onSend) {
                if isGenerating {
                    ProgressView()
                        .controlSize(.small)
                } else {
                    Image(systemName: "arrow.up.circle.fill")
                        .font(.title2)
                }
            }
            .disabled(!canSend)
        }
        .padding()
    }
}

struct EmptyStateView: View {
    let modelName: String
    
    var body: some View {
        VStack(spacing: 16) {
            Image(systemName: "bubble.left.and.bubble.right")
                .font(.system(size: 60))
                .foregroundColor(.secondary)
            
            VStack(spacing: 8) {
                Text("Start a conversation")
                    .font(.title2)
                    .fontWeight(.semibold)
                
                Text("Using \(modelName)")
                    .font(.caption)
                    .foregroundColor(.secondary)
            }
        }
        .frame(maxWidth: .infinity, maxHeight: .infinity)
    }
}

struct ChatMessageView: View {
    let message: SimpleChatMessage
    
    var body: some View {
        HStack(alignment: .top, spacing: 12) {
            if message.isUser {
                Spacer(minLength: 60)
            }
            
            VStack(alignment: message.isUser ? .trailing : .leading, spacing: 6) {
                HStack {
                    Text(message.isUser ? "You" : "AI")
                        .font(.caption2)
                        .fontWeight(.semibold)
                        .foregroundColor(message.isUser ? .blue : .green)
                    
                    Spacer()
                    
                    Text(message.timestamp, style: .time)
                        .font(.caption2)
                        .foregroundColor(.secondary)
                }
                
                Text(message.content)
                    .font(.body)
                    .textSelection(.enabled)
                    .padding(.vertical, 8)
                    .padding(.horizontal, 12)
                    .background(
                        message.isUser
                            ? Color.blue.opacity(0.1)
                            : Color.gray.opacity(0.2),
                        in: RoundedRectangle(cornerRadius: 12, style: .continuous)
                    )
            }
            
            if !message.isUser {
                Spacer(minLength: 60)
            }
        }
    }
}

struct TypingIndicatorView: View {
    @State private var animating = false
    
    var body: some View {
        HStack(alignment: .top, spacing: 12) {
            VStack(alignment: .leading, spacing: 6) {
                HStack {
                    Text("AI")
                        .font(.caption2)
                        .fontWeight(.semibold)
                        .foregroundColor(.green)
                    
                    Spacer()
                }
                
                HStack(spacing: 4) {
                    ForEach(0..<3) { index in
                        Circle()
                            .fill(.secondary)
                            .frame(width: 6, height: 6)
                            .scaleEffect(animating ? 1.2 : 0.8)
                            .animation(
                                .easeInOut(duration: 0.6)
                                    .repeatForever()
                                    .delay(Double(index) * 0.2),
                                value: animating
                            )
                    }
                }
                .padding(.vertical, 8)
                .padding(.horizontal, 12)
                .background(
                    Color.gray.opacity(0.2),
                    in: RoundedRectangle(cornerRadius: 12, style: .continuous)
                )
            }
            
            Spacer(minLength: 60)
        }
        .onAppear {
            animating = true
        }
    }
}

#Preview {
    ChatView()
} 